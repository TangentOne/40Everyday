#include<iostream>
#include<stack>
using namespace std;
//遍历两个链表并压栈
struct ListNode {
	int value;
	ListNode* next;
	ListNode(int data) :value(data), next(NULL) {}

};

ListNode add(ListNode* n1, ListNode* n2) {
	stack<int>s1;//stack 1
	stack<int>s2;//stack 2
	while (n1 != NULL)
	{
		s1.push(n1->value);
		n1 = n1->next;
	}
	while (n2 != NULL)
	{
		s2.push(n2->value);
		n2 = n2->next;
	}
	int count = 0;
	int i = 0;
	int j = 0;
	int result = 0;
	ListNode *node = NULL;
	ListNode *pre = NULL;
	while (!s1.empty() || !s2.empty()) {
		i = s1.top();
		s1.pop();//弹出
		j = s2.top();
		s2.pop();//弹出
		result = i + j + count;
		pre = node;
		node = new ListNode(result % 10);
		node->next = pre;
		count = result / 10;
	}
	if (result == 1) {
		pre = node;
		node = new ListNode(1);
		node->next = pre;
	}
	return *node;
}
